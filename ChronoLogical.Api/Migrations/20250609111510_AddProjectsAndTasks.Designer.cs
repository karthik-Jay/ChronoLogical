// <auto-generated />
using System;
using ChronoLogical.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChronoLogical.Api.Migrations
{
    [DbContext(typeof(ChronoLogicalContext))]
    [Migration("20250609111510_AddProjectsAndTasks")]
    partial class AddProjectsAndTasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ChronoLogical.Api.Model.TimeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TaskId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("IX_TimeEntries_StartTime");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("IX_TimeEntries_TaskId");

                    b.HasIndex("StartTime", "EndTime")
                        .HasDatabaseName("IX_TimeEntries_DateRange");

                    b.ToTable("TimeEntries", (string)null);
                });

            modelBuilder.Entity("ChronoLogical.Api.Model.WorkProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("ChronoLogical.Api.Model.WorkTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DevopsId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("ChronoLogical.Api.Model.TimeEntry", b =>
                {
                    b.HasOne("ChronoLogical.Api.Model.WorkProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("ChronoLogical.Api.Model.WorkTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ChronoLogical.Api.Model.WorkTask", b =>
                {
                    b.HasOne("ChronoLogical.Api.Model.WorkProject", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ChronoLogical.Api.Model.WorkProject", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
